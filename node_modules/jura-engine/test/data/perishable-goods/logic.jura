package org.accordproject.perishablegoods

import org.accordproject.contract.*
import org.accordproject.perishablegoods.*

contract PerishableGoods over TemplateModel {
  // Auxiliary function calculating penalty from temperature readings
  define function calculatePenalty(readings TemperatureReading[]) : Double {
    define variable tempReadings = for x in readings return x.centigrade;
    // find the lowest temperature reading
    define variable lowestReading = min(tempReadings);
    // find the highest temperature reading
    define variable highestReading = max(tempReadings);
    if lowestReading < this.minTemperature
    then (this.minTemperature - lowestReading) * this.minPenaltyFactor
    else if highestReading > this.maxTemperature
    then highestReading - this.maxTemperature) * this.maxPenaltyFactor
    else 0
  }

  // Clause for volume discount
  clause payout(request ShipmentReceived) : PriceCalculation throws Error {
    // Ensures against unitCount outside the bounds specified in the clause
    ensure request.unitCount < this.minUnits or request.unitCount > this.maxUnits
    else throw Error{ message : "Units received out of range for the contract." };
    // Ensures against requests for payout after the dueDate
    ensure momentIsAfter(this.dueDate,request.timestamp)
    else new PriceCalculation{
        totalPrice : 0,
        penalty : 0,
        late : true
    };
    // Ensures against missing temperature readings
    ensure let readings = request.shipment.temperatureReadings!
    else throw Error{ message : "No temperature readings received." };

    // Calculates payout
    define variable payOut = this.unitPrice * request.unitCount;
    // Calculates penalty if any
    define variable totalPenalty = calculatePenalty(readings) * request.unitCount;
    // Returns a Price calculation, applying any penalities
    return new PriceCalculation{
      totalPrice : max(payOut - totalPenalty, 0);
      penalty : totalPenalty;
      late : false
    }
  }
}
